/* Auto-generated by genmsg_cpp for file /home/haroldsoh/ros_workspace/head_pose/msg/head_data.msg */
#ifndef HEAD_POSE_MESSAGE_HEAD_DATA_H
#define HEAD_POSE_MESSAGE_HEAD_DATA_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "std_msgs/Header.h"

namespace head_pose
{
template <class ContainerAllocator>
struct head_data_ {
  typedef head_data_<ContainerAllocator> Type;

  head_data_()
  : header()
  , x_center(0.0)
  , y_center(0.0)
  , z_center(0.0)
  , x_front(0.0)
  , y_front(0.0)
  , z_front(0.0)
  , roll(0.0)
  , pitch(0.0)
  , yaw(0.0)
  {
  }

  head_data_(const ContainerAllocator& _alloc)
  : header(_alloc)
  , x_center(0.0)
  , y_center(0.0)
  , z_center(0.0)
  , x_front(0.0)
  , y_front(0.0)
  , z_front(0.0)
  , roll(0.0)
  , pitch(0.0)
  , yaw(0.0)
  {
  }

  typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
   ::std_msgs::Header_<ContainerAllocator>  header;

  typedef float _x_center_type;
  float x_center;

  typedef float _y_center_type;
  float y_center;

  typedef float _z_center_type;
  float z_center;

  typedef float _x_front_type;
  float x_front;

  typedef float _y_front_type;
  float y_front;

  typedef float _z_front_type;
  float z_front;

  typedef float _roll_type;
  float roll;

  typedef float _pitch_type;
  float pitch;

  typedef float _yaw_type;
  float yaw;


  typedef boost::shared_ptr< ::head_pose::head_data_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::head_pose::head_data_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct head_data
typedef  ::head_pose::head_data_<std::allocator<void> > head_data;

typedef boost::shared_ptr< ::head_pose::head_data> head_dataPtr;
typedef boost::shared_ptr< ::head_pose::head_data const> head_dataConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::head_pose::head_data_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::head_pose::head_data_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace head_pose

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::head_pose::head_data_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::head_pose::head_data_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::head_pose::head_data_<ContainerAllocator> > {
  static const char* value() 
  {
    return "057919f3c630fce60c12d3002220a7f2";
  }

  static const char* value(const  ::head_pose::head_data_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x057919f3c630fce6ULL;
  static const uint64_t static_value2 = 0x0c12d3002220a7f2ULL;
};

template<class ContainerAllocator>
struct DataType< ::head_pose::head_data_<ContainerAllocator> > {
  static const char* value() 
  {
    return "head_pose/head_data";
  }

  static const char* value(const  ::head_pose::head_data_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::head_pose::head_data_<ContainerAllocator> > {
  static const char* value() 
  {
    return "Header header\n\
\n\
#Coordinates of the Head Pose as well as roll/pitch/yaw\n\
float32 x_center\n\
float32 y_center\n\
float32 z_center\n\
\n\
\n\
float32 x_front\n\
float32 y_front \n\
float32 z_front\n\
\n\
\n\
float32 roll\n\
float32 pitch\n\
float32 yaw\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
";
  }

  static const char* value(const  ::head_pose::head_data_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct HasHeader< ::head_pose::head_data_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct HasHeader< const ::head_pose::head_data_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::head_pose::head_data_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.header);
    stream.next(m.x_center);
    stream.next(m.y_center);
    stream.next(m.z_center);
    stream.next(m.x_front);
    stream.next(m.y_front);
    stream.next(m.z_front);
    stream.next(m.roll);
    stream.next(m.pitch);
    stream.next(m.yaw);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct head_data_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::head_pose::head_data_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::head_pose::head_data_<ContainerAllocator> & v) 
  {
    s << indent << "header: ";
s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "x_center: ";
    Printer<float>::stream(s, indent + "  ", v.x_center);
    s << indent << "y_center: ";
    Printer<float>::stream(s, indent + "  ", v.y_center);
    s << indent << "z_center: ";
    Printer<float>::stream(s, indent + "  ", v.z_center);
    s << indent << "x_front: ";
    Printer<float>::stream(s, indent + "  ", v.x_front);
    s << indent << "y_front: ";
    Printer<float>::stream(s, indent + "  ", v.y_front);
    s << indent << "z_front: ";
    Printer<float>::stream(s, indent + "  ", v.z_front);
    s << indent << "roll: ";
    Printer<float>::stream(s, indent + "  ", v.roll);
    s << indent << "pitch: ";
    Printer<float>::stream(s, indent + "  ", v.pitch);
    s << indent << "yaw: ";
    Printer<float>::stream(s, indent + "  ", v.yaw);
  }
};


} // namespace message_operations
} // namespace ros

#endif // HEAD_POSE_MESSAGE_HEAD_DATA_H

